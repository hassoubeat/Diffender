AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

# 共通設定
Globals:
  Function:
    Timeout: 30
    Layers:
      - !Ref UtilLayer
      - !Ref MyLibLayer
    Environment:
      Variables:
        DIFFENDER_DYNAMODB_TABLE_NAME: !Ref DiffenderDynamoDB
        DIFFENDER_S3_BUCKET_NAME: !Ref DiffenderS3
        DIFFENDER_SCREENSHOT_PROCESS_SQS: !Ref ScreenshotProcessSQS
        TZ: 'Asia/Tokyo'

Parameters:
  Env: # prod: 本番環境、stg: 検品環境、 local: ローカル開発環境
    Type: String
    AllowedValues:
      - prod
      - stg
      - local
    Default: local

Resources:
  # Projectsの取得
  GetProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/projects/GetProjectFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /projects/{projectId}
            Method: get
  # Projectsの一覧取得
  GetProjectListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/projects/GetProjectListFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /projects
            Method: get
  # Projectsの登録
  PostProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/projects/PostProjectFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /projects
            Method: post
  # Projectsの更新
  PutProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/projects/PutProjectFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /projects/{projectId}
            Method: put
  # Projectsの削除
  DeleteProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/projects/DeleteProjectFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /projects/{projectId}
            Method: delete
  # Projectのスクリーンショット取得キューリクエスト
  ScreenshotQueingProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/projects/ScreenshotQueingProjectFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt ScreenshotProcessSQS.QueueName
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /projects/{projectId}/screenshot
            Method: post
  # Page一覧の取得
  GetPageListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/pages/GetPageListFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /projects/{projectId}/pages
            Method: get
  # Pageの取得
  GetPageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/pages/GetPageFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /projects/{projectId}/pages/{pageId}
            Method: get
  # Pageの登録
  PostPageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/pages/PostPageFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /projects/{projectId}/pages
            Method: post
  # Pageの更新
  PutPageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/pages/PutPageFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /projects/{projectId}/pages/{pageId}
            Method: put
  # Pageの削除
  DeletePageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/pages/DeletePageFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /projects/{projectId}/pages/{pageId}
            Method: delete
  # Pageのテスト
  TestPageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/pages/TestPageFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
        - S3CrudPolicy:
            BucketName: !Ref DiffenderS3
      Layers:
        - !Ref PuppeteerLayer
      Timeout: 30 # SQSの可視性タイムアウトと揃える
      MemorySize: 1600 # Puppeteerを動かす以上最低必要なメモリ
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /projects/{projectId}/pages/test
            Method: post

  # Resultの一覧取得
  GetResultListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/results/GetResultListFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /results
            Method: get
  # Resultの更新
  PutResultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/results/PutResultFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /results/{resultId}
            Method: put
  # Resultの削除
  DeleteResultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/results/DeleteResultFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /results/{resultId}
            Method: delete
  # UserOptionの取得
  GetUserOptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/users/GetUserOptionFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /userOption
            Method: get
  # UserOptionの登録
  PostUserOptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/users/PostUserOptionFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /userOption
            Method: post
  # UserOptionの更新
  PutUserOptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/users/PutUserOptionFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Events:
        RestPost:
          Type: Api
          Properties:
            RestApiId: !Ref DiffenderApi
            Path: /userOption
            Method: put
  # スクリーンショット取得処理
  ScreenshotProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/screenshots/ScreenshotProcessFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
        - S3CrudPolicy:
            BucketName: !Ref DiffenderS3
      Layers:
        - !Ref PuppeteerLayer
      Timeout: 30 # SQSの可視性タイムアウトと揃える
      MemorySize: 1600 # Puppeteerを動かす以上最低必要なメモリ
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ScreenshotProcessSQS.Arn
            BatchSize: 1
  # スクリーンショット取得処理のDLQ
  ScreenshotProcessDLQFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/screenshots/ScreenshotProcessDLQFunction/
      Handler: index.lambda_handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiffenderDynamoDB
      Layers:
        - !Ref PuppeteerLayer
      Timeout: 30 # SQSの可視性タイムアウトと揃える
      MemorySize: 1600 # Puppeteerを動かす以上最低必要なメモリ
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ScreenshotProcessDLQ.Arn
            BatchSize: 1
    
  # Puppeteer(chrome-aws-lambda)の関連ライブラリのレイヤー
  PuppeteerLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: 'lambda/layer/puppeteer'
      CompatibleRuntimes:
        - nodejs12.x
    Metadata:
      BuildMethod: nodejs12.x
  # 自前で実装したライブラリのレイヤー
  MyLibLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: 'lambda/layer/my-lib'
      CompatibleRuntimes:
        - nodejs12.x
    Metadata:
      BuildMethod: nodejs12.x
  # 汎用的なライブラリのレイヤー
  UtilLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: 'lambda/layer/util'
      CompatibleRuntimes:
        - nodejs12.x
    Metadata:
      BuildMethod: nodejs12.x
            
  DiffenderApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Env
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"
      # TODO 恐らくAWS-SAM-CLI側のバグでGatewayResponsesがうまくデプロイされないときがある
      # 同様の問題が発生しているIssue https://github.com/aws/aws-sam-cli/issues/1027
      GatewayResponses:
        # プロキシ統合の場合エラー時にヘッダーがセットされないため、エラー時にも返すように設定
        INTEGRATION_TIMEOUT:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
          StatusCode: 504
      # Auth:
      #   AddDefaultAuthorizerToCorsPreflight: false
      #   DefaultAuthorizer: CognitoAuthorizer
      #   Authorizers:
      #     CognitoAuthorizer:
      #       UserPoolArn: !GetAtt DiffenderUserPool.Arn

  # 本アプリで利用するS3バケット
  DiffenderS3:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${Env}-diffender"
      AccessControl: PublicRead
      LifecycleConfiguration: 
        Rules:
        - Id: TestDirRotateRule
          Prefix: test/
          Status: Enabled
          ExpirationInDays: 1
  DiffenderS3Policy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref DiffenderS3
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: "Allow"
            Principal: "*"
            Resource: !Sub arn:aws:s3:::${DiffenderS3}/*

  # 本アプリで利用するDynamoDB
  DiffenderDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Env}-diffender"
      # 属性の定義
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: createDtUnix
          AttributeType: N
        - AttributeName: projectTieUserId
          AttributeType: S
        - AttributeName: resultTieUserId
          AttributeType: S
        - AttributeName: pageTieProjectId
          AttributeType: S
        - AttributeName: resultItemTieResultId
          AttributeType: S
        - AttributeName: resultTieProjectId
          AttributeType: S
      # プライマリキープライマリキー、レンジキーの指定
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      # GSIの定義
      GlobalSecondaryIndexes:
        # ユーザIDでプロジェクト一覧を検索するためのGSI
        - IndexName: ProjectsByUserIdSearchIndex
          KeySchema:
            - AttributeName: projectTieUserId
              KeyType: HASH
            - AttributeName: createDtUnix
              KeyType: RANGE
          # 射影設定
          Projection:
            # 射影する属性の指定
            ProjectionType: ALL
          # GSIのスループットの指定
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
        # ユーザIDでリザルト一覧を検索するためのGSI
        - IndexName: ResultsByUserIdSearchIndex
          KeySchema:
            - AttributeName: resultTieUserId
              KeyType: HASH
            - AttributeName: createDtUnix
              KeyType: RANGE
          # 射影設定
          Projection:
            # 射影する属性の指定
            ProjectionType: ALL
          # GSIのスループットの指定
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
        # ProjectIdでページ一覧を検索するためのGSI
        - IndexName: PagesByProjectIdSearchIndex
          KeySchema:
            - AttributeName: pageTieProjectId
              KeyType: HASH
            - AttributeName: createDtUnix
              KeyType: RANGE
          # 射影設定
          Projection:
            # 射影する属性の指定
            ProjectionType: ALL
          # GSIのスループットの指定
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
        # ResultIdで結果一覧を検索するためのGSI
        - IndexName: ResultItemsByResultIdSearchIndex
          KeySchema:
            - AttributeName: resultItemTieResultId
              KeyType: HASH
            - AttributeName: createDtUnix
              KeyType: RANGE
          # 射影設定
          Projection:
            # 射影する属性の指定
            ProjectionType: ALL
          # GSIのスループットの指定
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
        # ProjectIdでリザルト一覧を検索するためのGSI
        - IndexName: ResultsByProjectIdSearchIndex
          KeySchema:
            - AttributeName: resultTieProjectId
              KeyType: HASH
            - AttributeName: createDtUnix
              KeyType: RANGE
          # 射影設定
          Projection:
            # 射影する属性の指定
            ProjectionType: ALL
          # GSIのスループットの指定
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
      # スループットの指定
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # スクリーンショット取得処理のキュー
  ScreenshotProcessSQS:
    Type: AWS::SQS::Queue
    Properties:
      # 可視性タイムアウト
      VisibilityTimeout: 30
      # メッセージをキューに貯めておく期間
      MessageRetentionPeriod: 86400
      # DLQの設定
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ScreenshotProcessDLQ.Arn
        maxReceiveCount: 1
  # スクリーンショット取得処理のデッドレターキュー
  ScreenshotProcessDLQ:
    Type: AWS::SQS::Queue
    Properties:
      # 可視性タイムアウト
      VisibilityTimeout: 30
      # メッセージをキューに貯めておく期間
      MessageRetentionPeriod: 86400
  
  # 本アプリで利用するCognitoユーザプール
  DiffenderUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${Env}-diffender"
      UsernameAttributes: 
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
      - Name: email
        AttributeDataType: String
        DeveloperOnlyAttribute: false
        Mutable: true
        Required: true
      AccountRecoverySetting:
        RecoveryMechanisms: 
          - Name: verified_email
            Priority: 1

  # 本アプリで利用するCognitoアプリクライアント
  DiffenderUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${Env}-diffender-client"
      GenerateSecret: false
      RefreshTokenValidity: 30
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      UserPoolId:
        Ref: DiffenderUserPool

Outputs:
  DiffenderApi:
    Description: "Diffender Api endpoint"
    Value: !Sub "https://${DiffenderApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}"
  DiffenderUserPool:
    Description: "Diffender Cognito User Pool ID"
    Value: !Ref DiffenderUserPool
  DiffenderUserPoolClient:
    Description: "Diffender Cognito User Pool Client ID"
    Value: !Ref DiffenderUserPoolClient